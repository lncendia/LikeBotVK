// <auto-generated />
using System;
using LikeBotVK.Infrastructure.PersistentStorage.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LikeBotVK.Infrastructure.PersistentStorage.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LikeBotVK.Infrastructure.PersistentStorage.Models.JobModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountErrors")
                        .HasColumnType("int");

                    b.Property<int>("CountSuccess")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("LowerInterval")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UpperInterval")
                        .HasColumnType("int");

                    b.Property<int>("VkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VkId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("LikeBotVK.Infrastructure.PersistentStorage.Models.ProxyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Proxies");
                });

            modelBuilder.Entity("LikeBotVK.Infrastructure.PersistentStorage.Models.PublicationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("JobModelId")
                        .HasColumnType("int");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("PublicationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobModelId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("LikeBotVK.Infrastructure.PersistentStorage.Models.UserModel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LikeBotVK.Infrastructure.PersistentStorage.Models.VkModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProxyId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProxyId");

                    b.HasIndex("UserId");

                    b.ToTable("Vks");
                });

            modelBuilder.Entity("LikeBotVK.Infrastructure.PersistentStorage.Models.JobModel", b =>
                {
                    b.HasOne("LikeBotVK.Infrastructure.PersistentStorage.Models.VkModel", "Vk")
                        .WithMany("Jobs")
                        .HasForeignKey("VkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vk");
                });

            modelBuilder.Entity("LikeBotVK.Infrastructure.PersistentStorage.Models.PublicationModel", b =>
                {
                    b.HasOne("LikeBotVK.Infrastructure.PersistentStorage.Models.JobModel", "JobModel")
                        .WithMany("Publications")
                        .HasForeignKey("JobModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobModel");
                });

            modelBuilder.Entity("LikeBotVK.Infrastructure.PersistentStorage.Models.VkModel", b =>
                {
                    b.HasOne("LikeBotVK.Infrastructure.PersistentStorage.Models.ProxyModel", "Proxy")
                        .WithMany("Vks")
                        .HasForeignKey("ProxyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LikeBotVK.Infrastructure.PersistentStorage.Models.UserModel", "User")
                        .WithMany("Vks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proxy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LikeBotVK.Infrastructure.PersistentStorage.Models.JobModel", b =>
                {
                    b.Navigation("Publications");
                });

            modelBuilder.Entity("LikeBotVK.Infrastructure.PersistentStorage.Models.ProxyModel", b =>
                {
                    b.Navigation("Vks");
                });

            modelBuilder.Entity("LikeBotVK.Infrastructure.PersistentStorage.Models.UserModel", b =>
                {
                    b.Navigation("Vks");
                });

            modelBuilder.Entity("LikeBotVK.Infrastructure.PersistentStorage.Models.VkModel", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
